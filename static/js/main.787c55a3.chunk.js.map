{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oOAagBA,EAXJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACxB,OACM,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACI,4BAAKF,GACL,2BAAIC,MCcJK,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OACC,6BAEOA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCbW,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKV,UAAU,OACf,2BACIA,UAAU,oCACbW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCEI,G,MARA,SAACC,GACf,OACO,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACtCH,EAAMI,YCwCDC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAgBDC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAYF,EAAMG,OAAOC,SAhBzC,EAAKC,MAAM,CACVvB,OAAO,GACDoB,YAAY,IAJP,E,gEAOQ,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACN,EAAKT,SAAS,CAACnB,OAAO4B,S,+BAOd,IAAD,EACwBC,KAAKN,MAA7BvB,EADA,EACAA,OAASoB,EADT,EACSA,YACRU,EAAiB9B,EAAO+B,QAAO,SAAAC,GAC1B,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASd,EAAYa,kBAE5D,OAAQjC,EAAOmC,OAGpB,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,OAAd,eACA,kBAAC,EAAD,CAAWU,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAQ8B,MANZ,wBAAIlC,UAAU,MAAd,kB,GA3BQwC,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnB,MAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCvFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDSnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCrB,MAAMoB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAAC,GAEJ,IAAM8C,EAAc9C,EAAS6C,QAAQE,IAAI,gBAEnB,MAApB/C,EAASgD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMnD,MAAK,SAAAwB,GACjCA,EAAa4B,aAAapD,MAAK,WAC7Bc,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMnD,MAAK,WACjC8B,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OC/B/BE,I","file":"static/js/main.787c55a3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card =({name,email,id})=>{\r\n\treturn(\r\n       <div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n           <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n       </div>\r\n\t\t);\r\n}\r\nexport  default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n\treturn(\r\n\t\t<div>\r\n        {\r\n        \trobots.map((user,i) =>{\r\n        \t\treturn (\r\n        \t\t<Card \r\n        \t\t\tkey={i} \r\n        \t\t\tid={robots[i].id} \r\n        \t\t\tname={robots[i].name} \r\n        \t\t\temail={robots[i].email}/>\r\n        \t\t\t);\r\n        \t})\r\n        }\r\n       </div>\r\n\t    );\r\n\r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) =>{ \r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t<input \r\n\t\t    className=\"pa3 ba b--green bg -lightest-blue\"\r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n        <div style={{overflowY:\"scroll\", height:\"430px\"}}>\r\n         {props.children}\r\n        </div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t        searchfield:\"\",\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response=>{\r\n\t     return response.json();\r\n\t\t})\r\n\t\t.then(users=>{\t\t\t\r\n\t\tthis.setState({robots:users})\r\n\t\t})\r\n\t}\r\n\r\n\tonSearchChange =(event)=>{\r\n\t\tthis.setState({ searchfield:event.target.value })         \r\n\t}\r\n\trender(){\r\n\t\tconst {robots , searchfield} = this.state;\r\n\t   const filteredRobots = robots.filter(robot =>{\r\n               return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n             });\r\n       \treturn !robots.length ?\r\n       \t\t <h1 className=\"tc\">Loading...</h1> :\r\n\t\t     (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1 \">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n        }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}